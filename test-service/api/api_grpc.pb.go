// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrueTechHackContest_RegisterTeam_FullMethodName   = "/TrueTechHackContest/RegisterTeam"
	TrueTechHackContest_SubmitSolution_FullMethodName = "/TrueTechHackContest/SubmitSolution"
	TrueTechHackContest_GetLeaderboard_FullMethodName = "/TrueTechHackContest/GetLeaderboard"
)

// TrueTechHackContestClient is the client API for TrueTechHackContest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrueTechHackContestClient interface {
	RegisterTeam(ctx context.Context, in *RegisterTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubmitSolution(ctx context.Context, in *SubmitSolutionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
}

type trueTechHackContestClient struct {
	cc grpc.ClientConnInterface
}

func NewTrueTechHackContestClient(cc grpc.ClientConnInterface) TrueTechHackContestClient {
	return &trueTechHackContestClient{cc}
}

func (c *trueTechHackContestClient) RegisterTeam(ctx context.Context, in *RegisterTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TrueTechHackContest_RegisterTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trueTechHackContestClient) SubmitSolution(ctx context.Context, in *SubmitSolutionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TrueTechHackContest_SubmitSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trueTechHackContestClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, TrueTechHackContest_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrueTechHackContestServer is the server API for TrueTechHackContest service.
// All implementations must embed UnimplementedTrueTechHackContestServer
// for forward compatibility.
type TrueTechHackContestServer interface {
	RegisterTeam(context.Context, *RegisterTeamRequest) (*emptypb.Empty, error)
	SubmitSolution(context.Context, *SubmitSolutionRequest) (*emptypb.Empty, error)
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	mustEmbedUnimplementedTrueTechHackContestServer()
}

// UnimplementedTrueTechHackContestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrueTechHackContestServer struct{}

func (UnimplementedTrueTechHackContestServer) RegisterTeam(context.Context, *RegisterTeamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTeam not implemented")
}
func (UnimplementedTrueTechHackContestServer) SubmitSolution(context.Context, *SubmitSolutionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSolution not implemented")
}
func (UnimplementedTrueTechHackContestServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedTrueTechHackContestServer) mustEmbedUnimplementedTrueTechHackContestServer() {}
func (UnimplementedTrueTechHackContestServer) testEmbeddedByValue()                             {}

// UnsafeTrueTechHackContestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrueTechHackContestServer will
// result in compilation errors.
type UnsafeTrueTechHackContestServer interface {
	mustEmbedUnimplementedTrueTechHackContestServer()
}

func RegisterTrueTechHackContestServer(s grpc.ServiceRegistrar, srv TrueTechHackContestServer) {
	// If the following call pancis, it indicates UnimplementedTrueTechHackContestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrueTechHackContest_ServiceDesc, srv)
}

func _TrueTechHackContest_RegisterTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrueTechHackContestServer).RegisterTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrueTechHackContest_RegisterTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrueTechHackContestServer).RegisterTeam(ctx, req.(*RegisterTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrueTechHackContest_SubmitSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrueTechHackContestServer).SubmitSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrueTechHackContest_SubmitSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrueTechHackContestServer).SubmitSolution(ctx, req.(*SubmitSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrueTechHackContest_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrueTechHackContestServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrueTechHackContest_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrueTechHackContestServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrueTechHackContest_ServiceDesc is the grpc.ServiceDesc for TrueTechHackContest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrueTechHackContest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrueTechHackContest",
	HandlerType: (*TrueTechHackContestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTeam",
			Handler:    _TrueTechHackContest_RegisterTeam_Handler,
		},
		{
			MethodName: "SubmitSolution",
			Handler:    _TrueTechHackContest_SubmitSolution_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _TrueTechHackContest_GetLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
